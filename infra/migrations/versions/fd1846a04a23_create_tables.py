"""create tables

Revision ID: fd1846a04a23
Revises:
Create Date: 2024-12-09 14:02:24.699332

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "fd1846a04a23"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "communities",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("patron", sa.String(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("image", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("actual_month_total_payment_value", sa.Float(), nullable=True),
        sa.Column("last_month_total_payment_value", sa.Float(), nullable=True),
        sa.Column("available_money", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("patron"),
    )
    op.create_table(
        "images",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("byte", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "finances",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("community_id", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("month", sa.String(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("value", sa.Float(), nullable=True),
        sa.Column("amount", sa.Integer(), nullable=True),
        sa.Column("hours", sa.Integer(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["community_id"],
            ["communities.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("cpf", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("birthday", sa.Date(), nullable=True),
        sa.Column("phone", sa.String(), nullable=True),
        sa.Column("position", sa.String(), nullable=True),
        sa.Column("image", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("community_id", sa.String(), nullable=True),
        sa.Column("responsibility", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["community_id"],
            ["communities.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("cpf"),
        sa.UniqueConstraint("phone"),
    )
    op.create_table(
        "warnings",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("scope", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("posted_at", sa.DateTime(), nullable=True),
        sa.Column("edited_at", sa.DateTime(), nullable=True),
        sa.Column("community_id", sa.String(), nullable=True),
        sa.Column("image", sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(
            ["community_id"],
            ["communities.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "logins",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("cpf", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column("position", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cpf"],
            ["users.cpf"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("cpf"),
    )
    op.create_table(
        "numbers",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("number", sa.String(), nullable=True),
        sa.Column("verification_code", sa.Integer(), nullable=True),
        sa.Column("valid", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("number"),
    )
    op.create_table(
        "payments",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("correlation_id", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("month", sa.String(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("value", sa.Float(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("correlation_id"),
    )
    op.create_table(
        "web_push",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("token", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("web_push")
    op.drop_table("payments")
    op.drop_table("numbers")
    op.drop_table("logins")
    op.drop_table("warnings")
    op.drop_table("users")
    op.drop_table("finances")
    op.drop_table("images")
    op.drop_table("communities")
    # ### end Alembic commands ###
